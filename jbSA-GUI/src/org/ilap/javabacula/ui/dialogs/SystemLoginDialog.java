/*
 *  JavaBacula -- Java frontend of the BaculaÂ® - The Network Backup Solution
 *  Copyright (C) 2007 by Pal DOROGI
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 *  Contact:   Pal DOROGI
 *  mailto:    pal.dorogi@gmail.com
 * 
 *  $Id$
 */

package org.ilap.javabacula.ui.dialogs;

import java.awt.*;
import java.awt.event.*; 
import java.io.IOException;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import java.text.*;
import java.util.Date;


import javax.swing.*;

import net.java.swingfx.waitwithstyle.*;

import org.apache.log4j.Logger;

import org.jdesktop.swingx.*;

import com.jgoodies.binding.adapter.Bindings;
import com.jgoodies.binding.PresentationModel;

import org.ilap.javabacula.auth.*;
import org.ilap.javabacula.model.BaculaSystem;
import org.ilap.javabacula.network.ConnectionManager;
import org.ilap.javabacula.ui.util.SwingUtils;

/**
 * 1. Click to connect button (Status=disConnected)
 * 2. Create an LoginInstance and fill with the datas
 * 3. Click to Connect-Login button...
 * 4. Wait for a connection (Status=Connecting...)
 *   4.1. set the timeout and start  a loginService in a thread
 *   4.2. Connect then, authenticate 
 * 5. A main channel is available (Status=Connected).
 * 6. Return to the main and start the datas gathering form Director and others
 *
 * @author  ilap
 */
public class SystemLoginDialog extends org.ilap.swing.components.CoolDialog {
    private static final Logger LOGGER =  Logger.getRootLogger();
    
    private InfiniteProgressPanel progress;
    private Frame parent; // for the 
    
    private final PresentationModel presentationModel;
    
    private Integer result = JOptionPane.CANCEL_OPTION;
    
    
    private ConnectionManager connectionManager;
    private BaculaLoginProcessListener connectionListener;

    private Cursor oldCursor;
    
    /**
     * Must be set to true when the user cancels their login operation.
     * This is reset to false
     * after the login thread is cancelled and the proper message shown
     */
    private boolean canceled;
    
    private BaculaSystem system;

    /**
     * Creates new form directorLoginDialog
     */
    public SystemLoginDialog(java.awt.Frame parent, BaculaSystem system) {
        super(parent, true);
        
        this.system = system;
        this.connectionManager = ConnectionManager.getInstance();
        this.connectionListener   = new BaculaLoginProcessListener();
        connectionManager.addLogonProcessListener(this.connectionListener);

        initComponents();
        SwingUtils.setToCenter(this);
        this.setTitle("Login to Director");
        
        //Clear old password
        system.setPassword("");
        this.presentationModel = new PresentationModel(system);
        Bindings.bind(systemNameField, this.presentationModel.getBufferedModel(BaculaSystem.PROPNAME_NAME));
        Bindings.bind(directorAddressField, this.presentationModel.getBufferedModel(BaculaSystem.PROPNAME_DIRADDRESS));
        Bindings.bind(loginNameField, this.presentationModel.getBufferedModel(BaculaSystem.PROPNAME_LOGINNAME));
        Bindings.bind(passwordField, this.presentationModel.getBufferedModel(BaculaSystem.PROPNAME_PASSWORD));

        
        progress = new InfiniteProgressPanel("Connecting to the director...");
        this.setGlassPane(progress);                
    }
    
/*    public class PropChanList implements PropertyChangeListener {
        public void propertyChange(PropertyChangeEvent evt) {
          //  PresentationModel spm;
          //  spm = (PresentationModel) evt.getSource();
            BaculaConstants.LOGGER.debug("PresModel Property changed..." +  evt.getPropertyName());
            
        }
        
    }
*/
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonPanel = new org.jdesktop.swingx.JXPanel();
        cancelButton = new javax.swing.JButton();
        loginButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jXPanel1 = new org.jdesktop.swingx.JXPanel();
        jXImagePanel1 = new org.jdesktop.swingx.JXImagePanel();
        loginNameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        loginNameField = new javax.swing.JTextField();
        instructionLabel = new javax.swing.JLabel();
        directorAddressLabel = new javax.swing.JLabel();
        systemNameField = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        systemNameLabel = new javax.swing.JLabel();
        directorAddressField = new javax.swing.JLabel();
        loginDialogCoolHeader = new org.ilap.swing.components.CoolHeader();

        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        buttonPanel.setBackground(new java.awt.Color(235, 235, 235));
        cancelButton.setText("Cancel");
        cancelButton.setDoubleBuffered(true);
        cancelButton.setNextFocusableComponent(loginNameField);
        cancelButton.setRolloverEnabled(true);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        loginButton.setText("Login");
        loginButton.setMaximumSize(new java.awt.Dimension(50, 22));
        loginButton.setMinimumSize(new java.awt.Dimension(50, 22));
        loginButton.setNextFocusableComponent(cancelButton);
        loginButton.setRolloverEnabled(true);
        loginButton.setSelected(true);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        jSeparator1.setForeground(new java.awt.Color(210, 210, 210));

        org.jdesktop.layout.GroupLayout buttonPanelLayout = new org.jdesktop.layout.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(buttonPanelLayout.createSequentialGroup()
                .addContainerGap(194, Short.MAX_VALUE)
                .add(loginButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 71, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(cancelButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .add(jSeparator1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, buttonPanelLayout.createSequentialGroup()
                .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 14, Short.MAX_VALUE)
                .add(buttonPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cancelButton)
                    .add(loginButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jXPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jXImagePanel1.setOpaque(false);
        loginNameLabel.setText("Login name:");

        passwordLabel.setText("Password: ");

        loginNameField.setText("Administrator");
        loginNameField.setNextFocusableComponent(passwordField);
        loginNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginNameFieldActionPerformed(evt);
            }
        });

        instructionLabel.setText("<html><p> You need enter a Login name and password.</html>");
        instructionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        instructionLabel.setBorder(javax.swing.BorderFactory.createEmptyBorder(2, 2, 2, 2));

        directorAddressLabel.setText("Director Address :");

        systemNameField.setFont(new java.awt.Font("Dialog", 1, 12));
        systemNameField.setText("System");

        passwordField.setNextFocusableComponent(loginButton);
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        passwordField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                passwordFieldKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                passwordFieldKeyTyped(evt);
            }
        });

        systemNameLabel.setText("Bacula System name:");

        directorAddressField.setText("director");

        org.jdesktop.layout.GroupLayout jXImagePanel1Layout = new org.jdesktop.layout.GroupLayout(jXImagePanel1);
        jXImagePanel1.setLayout(jXImagePanel1Layout);
        jXImagePanel1Layout.setHorizontalGroup(
            jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jXImagePanel1Layout.createSequentialGroup()
                .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(instructionLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                    .add(jXImagePanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(loginNameLabel)
                            .add(directorAddressLabel)
                            .add(systemNameLabel)
                            .add(passwordLabel))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(passwordField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .add(loginNameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .add(directorAddressField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 162, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(systemNameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jXImagePanel1Layout.setVerticalGroup(
            jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jXImagePanel1Layout.createSequentialGroup()
                .add(instructionLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(directorAddressLabel)
                        .add(directorAddressField))
                    .add(jXImagePanel1Layout.createSequentialGroup()
                        .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(systemNameLabel)
                            .add(systemNameField))
                        .add(21, 21, 21)))
                .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jXImagePanel1Layout.createSequentialGroup()
                        .add(34, 34, 34)
                        .add(passwordField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jXImagePanel1Layout.createSequentialGroup()
                        .add(5, 5, 5)
                        .add(jXImagePanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(loginNameLabel)
                            .add(loginNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(passwordLabel)))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jXPanel1Layout = new org.jdesktop.layout.GroupLayout(jXPanel1);
        jXPanel1.setLayout(jXPanel1Layout);
        jXPanel1Layout.setHorizontalGroup(
            jXPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jXImagePanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jXPanel1Layout.setVerticalGroup(
            jXPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jXImagePanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        loginDialogCoolHeader.setText("Login to Director");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(loginDialogCoolHeader, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
            .add(jXPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(buttonPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(loginDialogCoolHeader, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(jXPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(buttonPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void passwordFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyReleased
    }//GEN-LAST:event_passwordFieldKeyReleased

    private void passwordFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_passwordFieldKeyTyped
    }//GEN-LAST:event_passwordFieldKeyTyped

    private void loginNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginNameFieldActionPerformed
    }//GEN-LAST:event_loginNameFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // *** FIXME *** SETALIVE director.setAlive(false);
        //this.presentationModel.triggerFlush();
        this.result = JOptionPane.CANCEL_OPTION;
        this.canceled = true;
        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed
/**
 * 
 */
    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        
        // *** FIXME *** this.directorPresentationModel.triggerCommit();
        this.presentationModel.triggerCommit();
        this.result = JOptionPane.YES_OPTION;
        // director.setConnected(true);
        startLogin();       

    }//GEN-LAST:event_loginButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        // clear the all listeners
        // *** FIXME ***  this.directorPresentationModel.setBean(null);
        this.presentationModel.setBean(null);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jdesktop.swingx.JXPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel directorAddressField;
    private javax.swing.JLabel directorAddressLabel;
    private javax.swing.JLabel instructionLabel;
    private javax.swing.JSeparator jSeparator1;
    private org.jdesktop.swingx.JXImagePanel jXImagePanel1;
    private org.jdesktop.swingx.JXPanel jXPanel1;
    private javax.swing.JButton loginButton;
    private org.ilap.swing.components.CoolHeader loginDialogCoolHeader;
    private javax.swing.JTextField loginNameField;
    private javax.swing.JLabel loginNameLabel;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JLabel systemNameField;
    private javax.swing.JLabel systemNameLabel;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets the <strong>result/strong> of the Dialog.
     *
     * @return result Result of dialog
     */
    public boolean hasBeenCanceled() {
        return result == JOptionPane.CANCEL_OPTION;
    }  
    
    /**
     * This method is started when the user click to the "Connect" button or
     * press enter when the last textfield is written.
     * The process is the following:
     * a) start the infinite progress panel,
     * b) start the ConnectionManager.startAuthentication method (NON blocking while return),
     * c) restore everything:)
     */
    public void startLogin() {
        final SwingWorker worker = new SwingWorker() {

            public Object construct() {
                return null;
            }
            public Object doInBackground() {
                  try {
                     connectionManager.initializeConnections(system);
                     connectionManager.startLoginProcess();                    
                  } catch(IOException evt) {
                     progress.setText("IOException occured while login...");
                     setCursor(oldCursor);
                  }
                  return null;
            }

            //Runs on the event-dispatching thread.
            public void finished() { 
            
            }
        };  
        worker.execute();
   }
    
    /**
     * Cancel the logon process initialized by startLogin method.
     */
    public void cancelLogon() {
        connectionManager.cancelLogonProcess();
    }

   
   public LogonProcessService getLogonProcessService() {
      return connectionManager;
   }

 
    /**
     * The <strong>BaculaConnectionListener</strong> is a listener for the
     * login process
     */
    class BaculaLoginProcessListener implements LogonProcessListener {

        void showDialog(String message) {
            JOptionPane.showMessageDialog (null,message,
                                          "ConnectionService",
					  JOptionPane.ERROR_MESSAGE);
        }
        
        void logonProcessFailed() {
            result = JOptionPane.CANCEL_OPTION;
            progress.stop();
            setCursor(oldCursor);            
        }
        
        public void logonProcessStarted(LogonProcessEvent source) {
            progress.start();
            progress.setText("Establishing connection with bacula...");
            progress.setVisible(true);
            
            oldCursor = getCursor();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        }

        public void logonProcessFailed(LogonProcessEvent source) {
            this.logonProcessFailed();            
            this.showDialog("Connection is failed...");
        }        

        public void logonProcessCanceled(LogonProcessEvent source) {
            this.logonProcessFailed();
            setVisible(false);
        }

        public void logonProcessSucceeded(LogonProcessEvent source) {
            this.logonProcessFailed(); 
            system.setConnected(true);
            
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            system.setLastLogin(sdf.format(new Date()));
            result = JOptionPane.YES_OPTION;   
            setVisible(false);                        
        }
    }
    
    protected void onCancelKeyEvent(KeyEvent evt) {
        // ***FIXME*** cancelLogon();
    }
    
    protected void onEnterKeyEvent(KeyEvent evt) {
        JComponent comp = (JComponent) (this.getFocusOwner());
        JComponent nextComp = (JComponent)(comp.getNextFocusableComponent());
        
        if (nextComp == null) {
            return;
        }
        
         if (comp != loginButton) {
            nextComp.requestFocus();
        }
    }   
}
