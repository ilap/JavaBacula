/*
 *  JavaBacula -- Java frontend of the BaculaÂ® - The Network Backup Solution
 *  Copyright (C) 2007 by Pal DOROGI
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 *  Contact:   Pal DOROGI
 *  mailto:    pal.dorogi@gmail.com
 * 
 *  $Id$
 */

package org.ilap.javabacula.ui.views;

import java.util.LinkedList;
import java.util.List;

import javax.swing.ListModel;

import com.jgoodies.binding.adapter.AbstractTableAdapter;
import com.jgoodies.binding.adapter.SingleListSelectionAdapter;
import com.jgoodies.binding.list.SelectionInList;
import org.ilap.javabacula.ui.MainFrame;
import org.ilap.javabacula.model.SystemManager;
import org.ilap.javabacula.model.SystemManagerModel;
import com.jgoodies.binding.list.ArrayListModel;
import org.ilap.javabacula.model.BaculaSystem;

import javax.swing.table.*;
import javax.swing.tree.*;
import javax.swing.event.TreeModelEvent;
import javax.swing.event.TreeModelListener;
import javax.swing.ImageIcon;
import java.util.Hashtable;
import javax.swing.*;
import javax.swing.table.TableModel;

import com.jgoodies.binding.value.AbstractConverter;
import com.jgoodies.binding.value.ValueModel;

import java.awt.Component;
import org.ilap.swing.components.CoolTable;
import org.ilap.swing.components.CoolTableSelectionConverter;
import org.ilap.javabacula.ui.model.SystemsTableModel;
import org.ilap.javabacula.ui.util.BaculaIcons;

/**
 *
 * @author  ilap
 */
public class SystemsView extends BaculaView { 
    MainFrame parentFrame = null;

    SystemsTableModel  systemsTableModel;
    JTree mainTree;
    /**
     * Creates new form SystemsView
     */
    public SystemsView() {
        initComponents();
        initializeView();            
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        systemsTable = new org.ilap.swing.components.CoolTable();

        setOpaque(false);
        systemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        systemsTable.setColumnControlVisible(true);
        systemsTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                systemsTablePropertyChange(evt);
            }
        });

        jScrollPane1.setViewportView(systemsTable);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 304, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void systemsTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_systemsTablePropertyChange
// TODO add your handling code here:
    }//GEN-LAST:event_systemsTablePropertyChange
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private org.ilap.swing.components.CoolTable systemsTable;
    // End of variables declaration//GEN-END:variables

    /**
     * CellRenderer for the Director list and render a cell with director icon
     *
     */
    private static final class BaculaSystemsCellRenderer extends DefaultTableCellRenderer {

        private Icon _directorIcon;
        
        public BaculaSystemsCellRenderer() {
            super();
            _directorIcon = BaculaIcons.getInstance().getIcon("director"); 
        }
        
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, 
                boolean hasFocus, int row, int column) {
        
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
        
            setIcon(_directorIcon);
            return component;
        }
    }    
    
    public void initializeView() {
        systemsTable.setColumnControlVisible(true);
        /** Get the Bacula Backup Systems managers instance */
        SystemManager systemsManager = SystemManager.getInstance();
        
        this.model = new SystemManagerModel(systemsManager);        

        this.systemsTableModel = new SystemsTableModel(this.model.getObjectsSelection());
        systemsTable.setModel(this.systemsTableModel);
        
        systemsTable.setSelectionModel(new SingleListSelectionAdapter(
 				new CoolTableSelectionConverter(this.model.getObjectsSelection().getSelectionIndexHolder(), 
                                systemsTable)));

        
        systemsTable.getColumn(0).setCellRenderer((TableCellRenderer) (new BaculaSystemsCellRenderer()));

        systemsTable.addMouseListener(this.model.getDoubleClickHandler());
        systemsTable.setColumnControlVisible(true);
        
    }
    
    public void doOnEnter() {
        model.startModel();
    }
    
    public void uninitializeView() {}
    public void doOnLeave() {}
}
