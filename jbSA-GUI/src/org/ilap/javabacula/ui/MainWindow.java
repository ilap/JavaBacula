/*
 *  JavaBacula -- Java frontend of the BaculaÂ® - The Network Backup Solution
 *  Copyright (C) 2007 by Pal DOROGI
 * 
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by the
 *  Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 * 
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *  See the GNU General Public License for more details.
 * 
 *  You should have received a copy of the GNU General Public License along
 *  with this program; if not, write to the Free Software Foundation, Inc.,
 *  59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 * 
 *  Contact:   Pal DOROGI
 *  mailto:    pal.dorogi@gmail.com
 * 
 *  $Id$
 */

package org.ilap.javabacula.ui;

import org.ilap.javabacula.ui.model.BaculaTree;
import com.jhlabs.image.ShadowFilter;

import java.awt.Color;
import java.awt.Font;
import java.awt.RenderingHints;
import java.awt.geom.Point2D;
import javax.swing.JTree;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;
import java.util.Hashtable;

import org.ilap.javabacula.model.*;
import org.ilap.javabacula.network.ConnectionManager;
import org.ilap.javabacula.ui.model.*;

import org.jdesktop.swingx.painter.ImageEffect;
import org.jdesktop.swingx.painter.TextPainter;
import org.apache.log4j.Logger;

import org.ilap.javabacula.util.BaculaConstants;
import org.ilap.javabacula.ui.util.SwingUtils;

import org.ilap.javabacula.config.Configuration;
import org.ilap.javabacula.util.BaculaConstants;
import org.ilap.javabacula.ui.dialogs.AboutDialog;
import org.ilap.javabacula.ui.views.*;
import org.ilap.javabacula.ui.model.BaculaTreeNode;
import org.ilap.javabacula.ui.util.BaculaIcons;

import javax.swing.tree.*;
import com.jgoodies.binding.adapter.AbstractTableAdapter;

/**
 *
 * @author  ilap
 */
public class MainWindow extends org.jdesktop.swingx.JXFrame {
    
    /** Set up the logger of application */
    private static final Logger LOGGER =  Logger.getRootLogger();
        
    /** viewable panels of WorkingFrame */
    private Hashtable views;
    
    /** The active view loaded to the WorkingFrame */
    private String activeView = "";
    
    private BaculaTree baculaTree;        
    private BaculaStatusBar baculaStatusBar;
    
    private boolean systemsTree = false;
        
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        // Phase 1.: Initialize, setup and beautify components
        initComponents();
        setupComponents();
        beautifyComponents();
        ImageIcon ii = (ImageIcon) BaculaIcons.getInstance()
                .getIcon(BaculaConstants.ID_APPLICATION);
        
        this.setIconImage(ii.getImage());
        
        // Phase 2: Setting up the initial view and main button's actions
        BaculaView v = (BaculaView)(this.views.get(BaculaConstants.ID_SYSTEMS));
        connectButton.setAction(((SystemManagerModel)(v.getModel())).getConnectDirectorAction());
        disconnectButton.setAction(((SystemManagerModel)(v.getModel())).getDisconnectDirectorAction());
        ConnectionManager.getInstance().addPropertyChangeListener(baculaStatusBar);    
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainStatusBar = new org.jdesktop.swingx.JXStatusBar();
        mainHeaderPanel = new org.ilap.swing.components.CoolShadowPanel();
        connectButton = new org.ilap.swing.components.CoolButton();
        disconnectButton = new org.ilap.swing.components.CoolButton();
        configButton = new org.ilap.swing.components.CoolButton();
        aboutButton = new org.ilap.swing.components.CoolButton();
        mainTitlePanel = new org.ilap.swing.components.SimpleGradientPanel();
        logoIcon = new javax.swing.JLabel();
        appTitle = new org.jdesktop.swingx.JXPanel();
        mainSplitPane = new com.jgoodies.uif_lite.component.UIFSplitPane();
        mainTreePane = new javax.swing.JScrollPane();
        mainTree = new org.jdesktop.swingx.JXTree();
        workingFrame = new org.ilap.javabacula.ui.MainFrame();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JavaBacula prealpha 0.2");
        setBackground(new java.awt.Color(165, 165, 165));
        setForeground(new java.awt.Color(165, 165, 165));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        mainStatusBar.setPreferredSize(new java.awt.Dimension(25, 150));

        mainHeaderPanel.setLastColor(new java.awt.Color(240, 240, 240));

        connectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ilap/javabacula/ui/resources/icons/main_connect3.png"))); // NOI18N
        connectButton.setText("connect");
        connectButton.setSwapColor(true);
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionActionPerformed(evt);
            }
        });

        disconnectButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ilap/javabacula/ui/resources/icons/main_disconnect3.png"))); // NOI18N
        disconnectButton.setText("disconnect");
        disconnectButton.setEnabled(false);
        disconnectButton.setSwapColor(true);
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionActionPerformed(evt);
            }
        });

        configButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ilap/javabacula/ui/resources/icons/main_config3.png"))); // NOI18N
        configButton.setText("config");
        configButton.setSwapColor(true);
        configButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configButtonActionPerformed(evt);
            }
        });

        aboutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ilap/javabacula/ui/resources/icons/main_help3.png"))); // NOI18N
        aboutButton.setText("About");
        aboutButton.setSwapColor(true);
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        mainTitlePanel.setEndColor(new java.awt.Color(25, 45, 80));
        mainTitlePanel.setStartColor(new java.awt.Color(50, 70, 110));

        logoIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/ilap/javabacula/ui/resources/icons/main_connect1.png"))); // NOI18N

        appTitle.setOpaque(false);

        org.jdesktop.layout.GroupLayout appTitleLayout = new org.jdesktop.layout.GroupLayout(appTitle);
        appTitle.setLayout(appTitleLayout);
        appTitleLayout.setHorizontalGroup(
            appTitleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 110, Short.MAX_VALUE)
        );
        appTitleLayout.setVerticalGroup(
            appTitleLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 22, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout mainTitlePanelLayout = new org.jdesktop.layout.GroupLayout(mainTitlePanel);
        mainTitlePanel.setLayout(mainTitlePanelLayout);
        mainTitlePanelLayout.setHorizontalGroup(
            mainTitlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainTitlePanelLayout.createSequentialGroup()
                .addContainerGap(434, Short.MAX_VALUE)
                .add(logoIcon)
                .add(7, 7, 7)
                .add(appTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );
        mainTitlePanelLayout.setVerticalGroup(
            mainTitlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainTitlePanelLayout.createSequentialGroup()
                .add(mainTitlePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(mainTitlePanelLayout.createSequentialGroup()
                        .add(7, 7, 7)
                        .add(logoIcon))
                    .add(mainTitlePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(appTitle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout mainHeaderPanelLayout = new org.jdesktop.layout.GroupLayout(mainHeaderPanel);
        mainHeaderPanel.setLayout(mainHeaderPanelLayout);
        mainHeaderPanelLayout.setHorizontalGroup(
            mainHeaderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainHeaderPanelLayout.createSequentialGroup()
                .add(connectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(disconnectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(configButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(aboutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(2, 2, 2)
                .add(mainTitlePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        mainHeaderPanelLayout.setVerticalGroup(
            mainHeaderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(mainHeaderPanelLayout.createSequentialGroup()
                .add(3, 3, 3)
                .add(mainHeaderPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(connectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(disconnectButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(configButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(aboutButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
            .add(mainTitlePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 48, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        mainSplitPane.setBorder(null);
        mainSplitPane.setDividerLocation(185);
        mainSplitPane.setDividerSize(3);
        mainSplitPane.setLastDividerLocation(185);

        mainTreePane.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(160, 160, 160), 1, true));

        mainTree.setAutoscrolls(true);
        mainTree.setDoubleBuffered(true);
        mainTree.setMaximumSize(new java.awt.Dimension(300, 1280));
        mainTree.setMinimumSize(new java.awt.Dimension(90, 0));
        mainTree.setName("mainTree"); // NOI18N
        mainTree.setPreferredSize(new java.awt.Dimension(100, 72));
        mainTree.setShowsRootHandles(true);
        mainTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                mainTreeValueChanged(evt);
            }
        });
        mainTreePane.setViewportView(mainTree);

        mainSplitPane.setLeftComponent(mainTreePane);
        mainSplitPane.setRightComponent(workingFrame);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, mainStatusBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
            .add(mainHeaderPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(mainSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 771, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(mainHeaderPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(mainSplitPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
                .add(0, 0, 0)
                .add(mainStatusBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
    AboutDialog about = new AboutDialog(this, true);
    about.setVisible(true);        
}//GEN-LAST:event_aboutButtonActionPerformed

private void configButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configButtonActionPerformed
        JOptionPane.showMessageDialog (this, 
                                        "This feature not available at the moment!",
                                        "JavaBacula",
                                        JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_configButtonActionPerformed
        
    private void connectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionActionPerformed
        boolean connected = ConnectionManager.getInstance().isConnected();
        if (connected) {
            initializeViews(connected);
        }
        switchToSystemsTree(!connected);
    }//GEN-LAST:event_connectionActionPerformed
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // Save the config datas to file and exit.
        initializeViews(false);
        ConnectionManager.getInstance().removePropertyChangeListener(baculaStatusBar);
        SystemManager.getInstance().saveSystemsToConfig();
        Configuration.save();
        System.exit(0);
    }//GEN-LAST:event_formWindowClosing
    
    private void mainTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_mainTreeValueChanged
// TODO add your handling code here:
        // We use BaculaTreeNode instead of DefaultMutableTreeNode
        BaculaTreeNode node = (BaculaTreeNode)
                           ((JTree) evt.getSource()).getLastSelectedPathComponent();
        
        String oldID, newID;

        BaculaView oldView, newView;
        if (node == null) {
            return;
        }
        
        baculaStatusBar.setIndeterminate(true);
        
        //        Object o = node.getUserObject();
        //if (o instanceof BaculaSystem) {

        newID = node.toString();
        oldID = getActiveView();
        

        workingFrame.setFrameIcon(node.getIcon());
        workingFrame.setTitle(newID);        
        if (switchView(newID)) {
            oldView = getView(oldID);
            if (oldView != null) {
                oldView.doOnLeave();
            }
            newView = getView(newID);
            if (newView != null) {
                newView.doOnEnter();
            }                
        }

        baculaStatusBar.setIndeterminate(false);
    }//GEN-LAST:event_mainTreeValueChanged
    
    /** 
     * Initialize and/or setup the hidden components like
     * panels, tree, managers etc.
     */
    private void setupComponents() {

        // Setting up dynamic tree created from mainTree;        
        baculaTree = new BaculaTree(mainTree);
        
        // Setting up the panels that used by with main worker frame of application.
        this.views = makeViews();
        
       /** Setting up application's worker frame.
        *
        * This frame is on the right side of MainWindow and
        * consist of the working view (GUI components).
        */
        mainSplitPane.setRightComponent(this.workingFrame);
                        
        // Setting up status bar
        baculaStatusBar = new BaculaStatusBar(mainStatusBar);
        
        // switch to the first view when the application is started.
        this.systemsTree = false;
        switchToSystemsTree(true);
        switchView(BaculaConstants.ID_SYSTEMS);
        // On init we need different value for systemsTree
        //switchView(BaculaConstants.ID_RESTORE);
        //this.systemsTree = true;
        //switchToSystemsTree(false);
    }
    
    /** Beautify the mainWindow components like header, tree, toolbar etc. */
    public void beautifyComponents() {
        
        // Beautify the Header of mainwindow
        TextPainter text = new TextPainter();
        text.setFont(new Font("Verdana", Font.PLAIN, 18));
        text.setText("JavaBacula");
        text.setPaint(Color.WHITE);
        text.setLocation(new Point2D.Double(0.0, 0.0));
        text.setAntialiasing(RenderingHints.VALUE_ANTIALIAS_ON);
        
        ShadowFilter shadow = new ShadowFilter();
        shadow.setAngle(-45.0f);
        shadow.setDistance(3.0f);
        shadow.setRadius(3.0f);
        shadow.setOpacity(0.75f);
        shadow.setShadowColor(Color.WHITE.getRGB());
        text.setEffects(new ImageEffect(shadow));
        
        appTitle.setBackgroundPainter(text);
        SwingUtils.setToCenter(this);
    }
    
    
    private void initializeViews(final boolean connected ) {
       java.awt.EventQueue.invokeLater (new Runnable () {
            public void run () {
                for (Object o: views.values()) {
                    if (connected) {
                        ((BaculaView)o).initializeView();                        
                    } else {
                        ((BaculaView)o).uninitializeView();                        
                    }
                }
            }
        });                        
    }
    
    /** This method create the view panels that used by the app.
     * Like SystemPanel, DevicePanel etc.
     */
    private Hashtable makeViews() {
        Hashtable panels = new Hashtable();
        BaculaObjectManagerModel model =
        (BaculaObjectManagerModel) new SystemManagerModel(SystemManager.getInstance());
        AbstractTableAdapter ata = new SystemsTableModel(model.getObjectsSelection());        
        
        panels.put(BaculaConstants.ID_SYSTEMS, new CommonTableView(model, ata, true));
                
        
       // model =  (BaculaObjectManagerModel) new DeviceManagerModel(StorageManager.getInstance());
       // ata = new StorageTableModel(model.getObjectsSelection());        
        
        
        // model =  (BaculaObjectManagerModel) new DeviceManagerModel(StorageManager.getInstance());
        // ata = new StorageTableModel(model.getObjectsSelection());                
        
        model =  (BaculaObjectManagerModel) new PoolManagerModel(PoolManager.getInstance());
        ata = new PoolTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_RESTORE, new RestoreView());
        
        model =  (BaculaObjectManagerModel) new ActivatedJobManagerModel(ActivatedJobManager.getInstance());
        ata = new ActivatedJobTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_JOBMON, new CommonTableView(model, ata, true));        
        
        //panels.put(BaculaConstants.ID_TAPELIBS, null);//new CommonTableView(model, ata, true));
        //panels.put(BaculaConstants.ID_SINGLEDEVS,null);// new CommonTableView(model, ata, true));

         
    //    panels.put(BaculaConstants.ID_MEDIAMGMT, new CommonTableView(model, ata, true));
        model =  (BaculaObjectManagerModel) new VolumeManagerModel(VolumeManager.getInstance());
        ata = new VolumeTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_VOLUMES, new CommonTableView(model, ata, true));
        

        
        model =  (BaculaObjectManagerModel) new PoolManagerModel(PoolManager.getInstance());
        ata = new PoolTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_POOLS, new CommonTableView(model, ata, true));

        model =  (BaculaObjectManagerModel) new JobManagerModel(JobManager.getInstance());
        ata = new JobTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_JOBS, new CommonTableView(model, ata, true));

        model =  (BaculaObjectManagerModel) new ScheduleManagerModel(ScheduleManager.getInstance());
        ata = new ScheduleTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_SCHEDULES, new CommonTableView(model, ata, true));
     //   panels.put(BaculaConstants.ID_BACMGMT, new CommonTableView(model, ata, true));
        model =  (BaculaObjectManagerModel) new FileSetManagerModel(FileSetManager.getInstance());
        ata = new FileSetTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_FILESETS, new CommonTableView(model, ata, true));

        model =  (BaculaObjectManagerModel) new ClientManagerModel(ClientManager.getInstance());
        //ata = new ClientTableModel(model.getObjectsSelection());        
        ata = new ClientTableModel(model.getObjectsSelection());
        panels.put(BaculaConstants.ID_CLIENTS, new CommonTableView(model, ata, true));
        
        
        model =  (BaculaObjectManagerModel) new StorageManagerModel(StorageManager.getInstance());
        ata = new StorageTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_STORAGES, new CommonTableView(model, ata, false));

        ata = new StorageStatusTableModel(model.getObjectsSelection());        
        DevicesView dw = new DevicesView(model, ata, false);
        panels.put(BaculaConstants.ID_DEVMGMT, dw);
        panels.put(BaculaConstants.ID_DIRECTOR, dw);

        model =  (BaculaObjectManagerModel) new CatalogManagerModel(CatalogManager.getInstance());
        ata = new CatalogTableModel(model.getObjectsSelection());        
        panels.put(BaculaConstants.ID_CATALOGS, new CommonTableView(model, ata, false));
        
        //panels.put(BaculaConstants.ID_MESSAGES, new CommonTableView(model, ata, true));
        panels.put(BaculaConstants.ID_CONSOLE, new ConsoleView());
                        
        return panels;
    }
    
    /** Setter and getter method for switch to a view 
     * @param id 
     */
    public synchronized void setActiveView(String id) {
        activeView = id;
    }
    
    public synchronized String getActiveView() {
        return activeView;
    }
      
    public synchronized BaculaView getView(String id) {
        return (BaculaView) views.get(id);
    }

    private synchronized boolean switchView(String id) {

        if (!views.containsKey(id)) {
           showDialog("Sorry, but this function not implementet at the moment!");
           return false;
        }

        if (getActiveView().equals(id)) {
            return false;
        }
        
        // Switch the model of Tree
        BaculaView view = getView(id);        
        /**
         * Set the selected view to the right side and set the actions of buttons 
         */
        workingFrame.setContent(view);
        workingFrame.setHeaderVisible(view.getWantButtons());
        
        if (view.getWantButtons()) {
            workingFrame.setButtonAction(BaculaConstants.ID_ADD_BTN, view.getModel().getNewObjectAction());
            workingFrame.setButtonAction(BaculaConstants.ID_EDIT_BTN, view.getModel().getEditObjectAction());
            workingFrame.setButtonAction(BaculaConstants.ID_REMOVE_BTN, view.getModel().getDeleteObjectAction());            
            workingFrame.setButtonAction(BaculaConstants.ID_REFRESH_BTN, view.getModel().getRefreshObjectAction());            
        }

        setActiveView(id);
        repaint();
        validate();
        return true;
    }

    private void switchToSystemsTree(boolean systemsTree) {
        
        if (this.systemsTree == systemsTree) {
            return;
        } else {
            this.systemsTree = systemsTree;
        }
        
        if (this.systemsTree) {       
            populateSystemsTree();
        } else {
            populateDirectorTree();
        }       
        
        // Set root node selected
        baculaTree.getTree().setSelectionRow(0);
        // *** FIXME *** BUG or feature?
        // if I do not call the repaint the focus is lost
        baculaTree.getTree().repaint();
    }

    public void populateDirectorTree() {      
        // Initialize root
        BaculaObjectManagerModel model =
        (BaculaObjectManagerModel) new SystemManagerModel(SystemManager.getInstance());
        //;        

        
        BaculaView v = (BaculaView)(this.views.get(BaculaConstants.ID_SYSTEMS));
        BaculaSystem bs = (BaculaSystem)((SystemManagerModel)(v.getModel())).getObjectsSelection().getSelection();
 
        //baculaTree.initializeTree(bs);
        baculaTree.initializeTree(BaculaConstants.ID_DIRECTOR);
        
        //
        baculaTree.addObject(null, BaculaConstants.ID_RESTORE);
        baculaTree.addObject(null, BaculaConstants.ID_JOBMON);        
        
        BaculaTreeNode category = 
                baculaTree.addObject(null, BaculaConstants.ID_DEVMGMT);
        baculaTree.addObject(category, BaculaConstants.ID_TAPELIBS);
        baculaTree.addObject(category, BaculaConstants.ID_SINGLEDEVS);

         
        category = 
                baculaTree.addObject(null, BaculaConstants.ID_MEDIAMGMT);
        baculaTree.addObject(category, BaculaConstants.ID_VOLUMES);
        baculaTree.addObject(category, BaculaConstants.ID_POOLS);
        baculaTree.addObject(category, BaculaConstants.ID_JOBS);
        baculaTree.addObject(category, BaculaConstants.ID_SCHEDULES);
        baculaTree.addObject(category, BaculaConstants.ID_FILESETS);

        category = 
                baculaTree.addObject(null, BaculaConstants.ID_BACMGMT);
        baculaTree.addObject(category, BaculaConstants.ID_CLIENTS);
        baculaTree.addObject(category, BaculaConstants.ID_STORAGES);
        baculaTree.addObject(category, BaculaConstants.ID_CATALOGS);
        
        baculaTree.addObject(null, BaculaConstants.ID_MESSAGES);
        baculaTree.addObject(null, BaculaConstants.ID_CONSOLE);

        baculaTree.expandAll(baculaTree.getTree(), true);
    }
    
    public void populateSystemsTree() {
        baculaTree.initializeTree(BaculaConstants.ID_SYSTEMS);
    }       
    
    private void showDialog(String message) {
        JOptionPane.showMessageDialog (this, message,
                                       "Unimplemented function",
                                        JOptionPane.WARNING_MESSAGE);
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.ilap.swing.components.CoolButton aboutButton;
    private org.jdesktop.swingx.JXPanel appTitle;
    private org.ilap.swing.components.CoolButton configButton;
    private org.ilap.swing.components.CoolButton connectButton;
    private org.ilap.swing.components.CoolButton disconnectButton;
    private javax.swing.JLabel logoIcon;
    private org.ilap.swing.components.CoolShadowPanel mainHeaderPanel;
    private com.jgoodies.uif_lite.component.UIFSplitPane mainSplitPane;
    private org.jdesktop.swingx.JXStatusBar mainStatusBar;
    private org.ilap.swing.components.SimpleGradientPanel mainTitlePanel;
    private org.jdesktop.swingx.JXTree mainTree;
    private javax.swing.JScrollPane mainTreePane;
    private org.ilap.javabacula.ui.MainFrame workingFrame;
    // End of variables declaration//GEN-END:variables
}
